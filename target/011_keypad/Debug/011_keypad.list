
011_keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f4c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080010f4  080010f4  000110f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001198  08001198  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001198  08001198  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001198  08001198  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001198  08001198  00011198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800119c  0800119c  0001119c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080011a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000030  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009d8  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000332  00000000  00000000  00020a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00020d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000e8  00000000  00000000  00020eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002be0  00000000  00000000  00020fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001403  00000000  00000000  00023b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000937e  00000000  00000000  00024f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002e301  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a44  00000000  00000000  0002e354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080010dc 	.word	0x080010dc

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	080010dc 	.word	0x080010dc

080001e8 <delay>:

#include <stdint.h>
#include <stdio.h>


void delay(void){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0

	for(uint32_t i=0; i<300000; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>

}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	000493df 	.word	0x000493df

08000214 <main>:



int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
	uint32_t volatile *const pGPIODModeRegister = (uint32_t*) (0x40020C00+0x00);
	uint32_t volatile *const pGPIODOutputRegister = (uint32_t*) (0x40020C00+0x14);
	uint32_t volatile *const pGPIODInputRegister = (uint32_t*) (0x40020C00+0x10);
	uint32_t volatile *const pGPIODPullUpDownRegister = (uint32_t*) (0x40020C00+0x0C);*/

	uint32_t volatile *const pGPIODModeRegister = (uint32_t*)(0x40020C00);
 800021a:	4b8e      	ldr	r3, [pc, #568]	; (8000454 <main+0x240>)
 800021c:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const pGPIODInputRegister = (uint32_t*) (0x40020C00 + 0x10);
 800021e:	4b8e      	ldr	r3, [pc, #568]	; (8000458 <main+0x244>)
 8000220:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pGPIODOutputRegister = (uint32_t*) (0x40020C00 + 0x14);
 8000222:	4b8e      	ldr	r3, [pc, #568]	; (800045c <main+0x248>)
 8000224:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pClockControlRegister = (uint32_t*)(0x40023800 + 0x30);
 8000226:	4b8e      	ldr	r3, [pc, #568]	; (8000460 <main+0x24c>)
 8000228:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pGPIODPullUpDownRegister = (uint32_t*) (0x40020C00 + 0x0C);
 800022a:	4b8e      	ldr	r3, [pc, #568]	; (8000464 <main+0x250>)
 800022c:	607b      	str	r3, [r7, #4]
	// GPIOD clocuku aktiflestir

	*pClockControlRegister |= (1<<3);
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0208 	orr.w	r2, r3, #8
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	601a      	str	r2, [r3, #0]

	// PD0 PD1 PD2 PD3 output (rows)
	*pGPIODModeRegister &= ~(0xFF); // clear
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	601a      	str	r2, [r3, #0]
	*pGPIODModeRegister |= 0x55; //set
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	601a      	str	r2, [r3, #0]

	// PD8 PD9 PD10 PD11 input (columns)

	*pGPIODModeRegister &= ~(0xFF<<16); // clear
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	601a      	str	r2, [r3, #0]

	// PD8 PD9 PD10 PD11 enable pull up resistor
	*pGPIODPullUpDownRegister &= ~(0xFF<<16);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	601a      	str	r2, [r3, #0]
	*pGPIODPullUpDownRegister |= (0x55<<16);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f443 02aa 	orr.w	r2, r3, #5570560	; 0x550000
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]

	while(1){
	// make all rows  HIGH
	*pGPIODOutputRegister |= 0x0F;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f043 020f 	orr.w	r2, r3, #15
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	601a      	str	r2, [r3, #0]

	// make R1 LOW (pd0)
	*pGPIODOutputRegister &= ~(1<<0);
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f023 0201 	bic.w	r2, r3, #1
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]

	if(!(*pGPIODInputRegister & (1<<8))){
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000296:	2b00      	cmp	r3, #0
 8000298:	d104      	bne.n	80002a4 <main+0x90>
		// press
		delay();
 800029a:	f7ff ffa5 	bl	80001e8 <delay>
		printf("1\n");
 800029e:	4872      	ldr	r0, [pc, #456]	; (8000468 <main+0x254>)
 80002a0:	f000 fa92 	bl	80007c8 <puts>
	}

	//check c2(p09)
	if(!(*pGPIODInputRegister & (1<<9))){
 80002a4:	693b      	ldr	r3, [r7, #16]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d104      	bne.n	80002ba <main+0xa6>
		delay();
 80002b0:	f7ff ff9a 	bl	80001e8 <delay>
			// press
			printf("2\n");
 80002b4:	486d      	ldr	r0, [pc, #436]	; (800046c <main+0x258>)
 80002b6:	f000 fa87 	bl	80007c8 <puts>
	}
	if(!(*pGPIODInputRegister & (1<<10))){
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d104      	bne.n	80002d0 <main+0xbc>
			// press
			delay();
 80002c6:	f7ff ff8f 	bl	80001e8 <delay>
			printf("3\n");
 80002ca:	4869      	ldr	r0, [pc, #420]	; (8000470 <main+0x25c>)
 80002cc:	f000 fa7c 	bl	80007c8 <puts>
	}

	if(!(*pGPIODInputRegister & (1<<11))){
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d104      	bne.n	80002e6 <main+0xd2>
			// press
			delay();
 80002dc:	f7ff ff84 	bl	80001e8 <delay>
			printf("A\n");
 80002e0:	4864      	ldr	r0, [pc, #400]	; (8000474 <main+0x260>)
 80002e2:	f000 fa71 	bl	80007c8 <puts>
		}
//
	*pGPIODOutputRegister |= 0x0F;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f043 020f 	orr.w	r2, r3, #15
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	601a      	str	r2, [r3, #0]
	// make R2 LOW (pd1)
	*pGPIODOutputRegister &= ~(1<<1);
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f023 0202 	bic.w	r2, r3, #2
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	601a      	str	r2, [r3, #0]
	if(!(*pGPIODInputRegister & (1<<8))){
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000306:	2b00      	cmp	r3, #0
 8000308:	d104      	bne.n	8000314 <main+0x100>
		// press
		delay();
 800030a:	f7ff ff6d 	bl	80001e8 <delay>
		printf("4\n");
 800030e:	485a      	ldr	r0, [pc, #360]	; (8000478 <main+0x264>)
 8000310:	f000 fa5a 	bl	80007c8 <puts>
	}

	//check c2(p09)
	if(!(*pGPIODInputRegister & (1<<9))){
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800031c:	2b00      	cmp	r3, #0
 800031e:	d104      	bne.n	800032a <main+0x116>
		delay();
 8000320:	f7ff ff62 	bl	80001e8 <delay>
			// press
			printf("5\n");
 8000324:	4855      	ldr	r0, [pc, #340]	; (800047c <main+0x268>)
 8000326:	f000 fa4f 	bl	80007c8 <puts>
	}
	if(!(*pGPIODInputRegister & (1<<10))){
 800032a:	693b      	ldr	r3, [r7, #16]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000332:	2b00      	cmp	r3, #0
 8000334:	d104      	bne.n	8000340 <main+0x12c>
			// press
			delay();
 8000336:	f7ff ff57 	bl	80001e8 <delay>
			printf("6\n");
 800033a:	4851      	ldr	r0, [pc, #324]	; (8000480 <main+0x26c>)
 800033c:	f000 fa44 	bl	80007c8 <puts>
	}

	if(!(*pGPIODInputRegister & (1<<11))){
 8000340:	693b      	ldr	r3, [r7, #16]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000348:	2b00      	cmp	r3, #0
 800034a:	d104      	bne.n	8000356 <main+0x142>
			// press
			delay();
 800034c:	f7ff ff4c 	bl	80001e8 <delay>
			printf("B\n");
 8000350:	484c      	ldr	r0, [pc, #304]	; (8000484 <main+0x270>)
 8000352:	f000 fa39 	bl	80007c8 <puts>
		}

	*pGPIODOutputRegister |= 0x0F;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f043 020f 	orr.w	r2, r3, #15
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	// make R2 LOW (pd0)
	*pGPIODOutputRegister &= ~(1<<1);
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f023 0202 	bic.w	r2, r3, #2
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

//
	*pGPIODOutputRegister |= 0x0F;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f043 020f 	orr.w	r2, r3, #15
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]
	// make R3 LOW (pd2)
	*pGPIODOutputRegister &= ~(1<<2);
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f023 0204 	bic.w	r2, r3, #4
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	601a      	str	r2, [r3, #0]
		if(!(*pGPIODInputRegister & (1<<8))){
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800038e:	2b00      	cmp	r3, #0
 8000390:	d104      	bne.n	800039c <main+0x188>
			// press
			delay();
 8000392:	f7ff ff29 	bl	80001e8 <delay>
			printf("7\n");
 8000396:	483c      	ldr	r0, [pc, #240]	; (8000488 <main+0x274>)
 8000398:	f000 fa16 	bl	80007c8 <puts>
		}

		//check c2(p09)
		if(!(*pGPIODInputRegister & (1<<9))){
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d104      	bne.n	80003b2 <main+0x19e>
			delay();
 80003a8:	f7ff ff1e 	bl	80001e8 <delay>
				// press
				printf("8\n");
 80003ac:	4837      	ldr	r0, [pc, #220]	; (800048c <main+0x278>)
 80003ae:	f000 fa0b 	bl	80007c8 <puts>
		}
		if(!(*pGPIODInputRegister & (1<<10))){
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d104      	bne.n	80003c8 <main+0x1b4>
				// press
				delay();
 80003be:	f7ff ff13 	bl	80001e8 <delay>
				printf("9\n");
 80003c2:	4833      	ldr	r0, [pc, #204]	; (8000490 <main+0x27c>)
 80003c4:	f000 fa00 	bl	80007c8 <puts>
		}

		if(!(*pGPIODInputRegister & (1<<11))){
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d104      	bne.n	80003de <main+0x1ca>
				// press
				delay();
 80003d4:	f7ff ff08 	bl	80001e8 <delay>
				printf("C\n");
 80003d8:	482e      	ldr	r0, [pc, #184]	; (8000494 <main+0x280>)
 80003da:	f000 f9f5 	bl	80007c8 <puts>
			}

//

		*pGPIODOutputRegister |= 0x0F;
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f043 020f 	orr.w	r2, r3, #15
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	601a      	str	r2, [r3, #0]
			// make R4 LOW (pd1)
			*pGPIODOutputRegister &= ~(1<<3);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f023 0208 	bic.w	r2, r3, #8
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	601a      	str	r2, [r3, #0]
			if(!(*pGPIODInputRegister & (1<<8))){
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d104      	bne.n	800040c <main+0x1f8>
				// press
				delay();
 8000402:	f7ff fef1 	bl	80001e8 <delay>
				printf("*\n");
 8000406:	4824      	ldr	r0, [pc, #144]	; (8000498 <main+0x284>)
 8000408:	f000 f9de 	bl	80007c8 <puts>
			}

			//check c2(p09)
			if(!(*pGPIODInputRegister & (1<<9))){
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000414:	2b00      	cmp	r3, #0
 8000416:	d104      	bne.n	8000422 <main+0x20e>
					delay();
 8000418:	f7ff fee6 	bl	80001e8 <delay>
					// press
					printf("0\n");
 800041c:	481f      	ldr	r0, [pc, #124]	; (800049c <main+0x288>)
 800041e:	f000 f9d3 	bl	80007c8 <puts>
			}
			if(!(*pGPIODInputRegister & (1<<10))){
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800042a:	2b00      	cmp	r3, #0
 800042c:	d104      	bne.n	8000438 <main+0x224>
					// press
					delay();
 800042e:	f7ff fedb 	bl	80001e8 <delay>
					printf("#\n");
 8000432:	481b      	ldr	r0, [pc, #108]	; (80004a0 <main+0x28c>)
 8000434:	f000 f9c8 	bl	80007c8 <puts>
			}

			if(!(*pGPIODInputRegister & (1<<11))){
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000440:	2b00      	cmp	r3, #0
 8000442:	f47f af18 	bne.w	8000276 <main+0x62>
					// press
					delay();
 8000446:	f7ff fecf 	bl	80001e8 <delay>
					printf("D\n");
 800044a:	4816      	ldr	r0, [pc, #88]	; (80004a4 <main+0x290>)
 800044c:	f000 f9bc 	bl	80007c8 <puts>
	*pGPIODOutputRegister |= 0x0F;
 8000450:	e711      	b.n	8000276 <main+0x62>
 8000452:	bf00      	nop
 8000454:	40020c00 	.word	0x40020c00
 8000458:	40020c10 	.word	0x40020c10
 800045c:	40020c14 	.word	0x40020c14
 8000460:	40023830 	.word	0x40023830
 8000464:	40020c0c 	.word	0x40020c0c
 8000468:	080010f4 	.word	0x080010f4
 800046c:	080010f8 	.word	0x080010f8
 8000470:	080010fc 	.word	0x080010fc
 8000474:	08001100 	.word	0x08001100
 8000478:	08001104 	.word	0x08001104
 800047c:	08001108 	.word	0x08001108
 8000480:	0800110c 	.word	0x0800110c
 8000484:	08001110 	.word	0x08001110
 8000488:	08001114 	.word	0x08001114
 800048c:	08001118 	.word	0x08001118
 8000490:	0800111c 	.word	0x0800111c
 8000494:	08001120 	.word	0x08001120
 8000498:	08001124 	.word	0x08001124
 800049c:	08001128 	.word	0x08001128
 80004a0:	0800112c 	.word	0x0800112c
 80004a4:	08001130 	.word	0x08001130

080004a8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <ITM_SendChar+0x44>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <ITM_SendChar+0x44>)
 80004b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004bc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <ITM_SendChar+0x48>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a0b      	ldr	r2, [pc, #44]	; (80004f0 <ITM_SendChar+0x48>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004ca:	bf00      	nop
 80004cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0f8      	beq.n	80004cc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	6013      	str	r3, [r2, #0]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	e000edfc 	.word	0xe000edfc
 80004f0:	e0000e00 	.word	0xe0000e00

080004f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	e00a      	b.n	800051c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000506:	f3af 8000 	nop.w
 800050a:	4601      	mov	r1, r0
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	60ba      	str	r2, [r7, #8]
 8000512:	b2ca      	uxtb	r2, r1
 8000514:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	3301      	adds	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	429a      	cmp	r2, r3
 8000522:	dbf0      	blt.n	8000506 <_read+0x12>
	}

return len;
 8000524:	687b      	ldr	r3, [r7, #4]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3718      	adds	r7, #24
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b086      	sub	sp, #24
 8000532:	af00      	add	r7, sp, #0
 8000534:	60f8      	str	r0, [r7, #12]
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	e009      	b.n	8000554 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		 ITM_SendChar(*ptr++);
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	1c5a      	adds	r2, r3, #1
 8000544:	60ba      	str	r2, [r7, #8]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ffad 	bl	80004a8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	3301      	adds	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	697a      	ldr	r2, [r7, #20]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	429a      	cmp	r2, r3
 800055a:	dbf1      	blt.n	8000540 <_write+0x12>
	}
	return len;
 800055c:	687b      	ldr	r3, [r7, #4]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <_close>:

int _close(int file)
{
 8000566:	b480      	push	{r7}
 8000568:	b083      	sub	sp, #12
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
	return -1;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800058c:	605a      	str	r2, [r3, #4]
	return 0;
 800058e:	2300      	movs	r3, #0
}
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <_isatty>:

int _isatty(int file)
{
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
	return 1;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	60f8      	str	r0, [r7, #12]
 80005b6:	60b9      	str	r1, [r7, #8]
 80005b8:	607a      	str	r2, [r7, #4]
	return 0;
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
	...

080005c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d0:	4a14      	ldr	r2, [pc, #80]	; (8000624 <_sbrk+0x5c>)
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <_sbrk+0x60>)
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <_sbrk+0x64>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d102      	bne.n	80005ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <_sbrk+0x64>)
 80005e6:	4a12      	ldr	r2, [pc, #72]	; (8000630 <_sbrk+0x68>)
 80005e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <_sbrk+0x64>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	693a      	ldr	r2, [r7, #16]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d207      	bcs.n	8000608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f8:	f000 f846 	bl	8000688 <__errno>
 80005fc:	4603      	mov	r3, r0
 80005fe:	220c      	movs	r2, #12
 8000600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	e009      	b.n	800061c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <_sbrk+0x64>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <_sbrk+0x64>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	4a05      	ldr	r2, [pc, #20]	; (800062c <_sbrk+0x64>)
 8000618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800061a:	68fb      	ldr	r3, [r7, #12]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20020000 	.word	0x20020000
 8000628:	00000400 	.word	0x00000400
 800062c:	20000080 	.word	0x20000080
 8000630:	20000098 	.word	0x20000098

08000634 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000636:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000638:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <LoopForever+0x6>)
  ldr r1, =_edata
 800063e:	490d      	ldr	r1, [pc, #52]	; (8000674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000640:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <LoopForever+0xe>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000654:	4c0a      	ldr	r4, [pc, #40]	; (8000680 <LoopForever+0x16>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000662:	f000 f817 	bl	8000694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000666:	f7ff fdd5 	bl	8000214 <main>

0800066a <LoopForever>:

LoopForever:
    b LoopForever
 800066a:	e7fe      	b.n	800066a <LoopForever>
  ldr   r0, =_estack
 800066c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000678:	080011a0 	.word	0x080011a0
  ldr r2, =_sbss
 800067c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000680:	20000094 	.word	0x20000094

08000684 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC_IRQHandler>
	...

08000688 <__errno>:
 8000688:	4b01      	ldr	r3, [pc, #4]	; (8000690 <__errno+0x8>)
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000000 	.word	0x20000000

08000694 <__libc_init_array>:
 8000694:	b570      	push	{r4, r5, r6, lr}
 8000696:	4d0d      	ldr	r5, [pc, #52]	; (80006cc <__libc_init_array+0x38>)
 8000698:	4c0d      	ldr	r4, [pc, #52]	; (80006d0 <__libc_init_array+0x3c>)
 800069a:	1b64      	subs	r4, r4, r5
 800069c:	10a4      	asrs	r4, r4, #2
 800069e:	2600      	movs	r6, #0
 80006a0:	42a6      	cmp	r6, r4
 80006a2:	d109      	bne.n	80006b8 <__libc_init_array+0x24>
 80006a4:	4d0b      	ldr	r5, [pc, #44]	; (80006d4 <__libc_init_array+0x40>)
 80006a6:	4c0c      	ldr	r4, [pc, #48]	; (80006d8 <__libc_init_array+0x44>)
 80006a8:	f000 fd18 	bl	80010dc <_init>
 80006ac:	1b64      	subs	r4, r4, r5
 80006ae:	10a4      	asrs	r4, r4, #2
 80006b0:	2600      	movs	r6, #0
 80006b2:	42a6      	cmp	r6, r4
 80006b4:	d105      	bne.n	80006c2 <__libc_init_array+0x2e>
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006bc:	4798      	blx	r3
 80006be:	3601      	adds	r6, #1
 80006c0:	e7ee      	b.n	80006a0 <__libc_init_array+0xc>
 80006c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c6:	4798      	blx	r3
 80006c8:	3601      	adds	r6, #1
 80006ca:	e7f2      	b.n	80006b2 <__libc_init_array+0x1e>
 80006cc:	08001198 	.word	0x08001198
 80006d0:	08001198 	.word	0x08001198
 80006d4:	08001198 	.word	0x08001198
 80006d8:	0800119c 	.word	0x0800119c

080006dc <memset>:
 80006dc:	4402      	add	r2, r0
 80006de:	4603      	mov	r3, r0
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d100      	bne.n	80006e6 <memset+0xa>
 80006e4:	4770      	bx	lr
 80006e6:	f803 1b01 	strb.w	r1, [r3], #1
 80006ea:	e7f9      	b.n	80006e0 <memset+0x4>

080006ec <_puts_r>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	460e      	mov	r6, r1
 80006f0:	4605      	mov	r5, r0
 80006f2:	b118      	cbz	r0, 80006fc <_puts_r+0x10>
 80006f4:	6983      	ldr	r3, [r0, #24]
 80006f6:	b90b      	cbnz	r3, 80006fc <_puts_r+0x10>
 80006f8:	f000 fa44 	bl	8000b84 <__sinit>
 80006fc:	69ab      	ldr	r3, [r5, #24]
 80006fe:	68ac      	ldr	r4, [r5, #8]
 8000700:	b913      	cbnz	r3, 8000708 <_puts_r+0x1c>
 8000702:	4628      	mov	r0, r5
 8000704:	f000 fa3e 	bl	8000b84 <__sinit>
 8000708:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <_puts_r+0xd0>)
 800070a:	429c      	cmp	r4, r3
 800070c:	d120      	bne.n	8000750 <_puts_r+0x64>
 800070e:	686c      	ldr	r4, [r5, #4]
 8000710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000712:	07db      	lsls	r3, r3, #31
 8000714:	d405      	bmi.n	8000722 <_puts_r+0x36>
 8000716:	89a3      	ldrh	r3, [r4, #12]
 8000718:	0598      	lsls	r0, r3, #22
 800071a:	d402      	bmi.n	8000722 <_puts_r+0x36>
 800071c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800071e:	f000 facf 	bl	8000cc0 <__retarget_lock_acquire_recursive>
 8000722:	89a3      	ldrh	r3, [r4, #12]
 8000724:	0719      	lsls	r1, r3, #28
 8000726:	d51d      	bpl.n	8000764 <_puts_r+0x78>
 8000728:	6923      	ldr	r3, [r4, #16]
 800072a:	b1db      	cbz	r3, 8000764 <_puts_r+0x78>
 800072c:	3e01      	subs	r6, #1
 800072e:	68a3      	ldr	r3, [r4, #8]
 8000730:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000734:	3b01      	subs	r3, #1
 8000736:	60a3      	str	r3, [r4, #8]
 8000738:	bb39      	cbnz	r1, 800078a <_puts_r+0x9e>
 800073a:	2b00      	cmp	r3, #0
 800073c:	da38      	bge.n	80007b0 <_puts_r+0xc4>
 800073e:	4622      	mov	r2, r4
 8000740:	210a      	movs	r1, #10
 8000742:	4628      	mov	r0, r5
 8000744:	f000 f848 	bl	80007d8 <__swbuf_r>
 8000748:	3001      	adds	r0, #1
 800074a:	d011      	beq.n	8000770 <_puts_r+0x84>
 800074c:	250a      	movs	r5, #10
 800074e:	e011      	b.n	8000774 <_puts_r+0x88>
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <_puts_r+0xd4>)
 8000752:	429c      	cmp	r4, r3
 8000754:	d101      	bne.n	800075a <_puts_r+0x6e>
 8000756:	68ac      	ldr	r4, [r5, #8]
 8000758:	e7da      	b.n	8000710 <_puts_r+0x24>
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <_puts_r+0xd8>)
 800075c:	429c      	cmp	r4, r3
 800075e:	bf08      	it	eq
 8000760:	68ec      	ldreq	r4, [r5, #12]
 8000762:	e7d5      	b.n	8000710 <_puts_r+0x24>
 8000764:	4621      	mov	r1, r4
 8000766:	4628      	mov	r0, r5
 8000768:	f000 f888 	bl	800087c <__swsetup_r>
 800076c:	2800      	cmp	r0, #0
 800076e:	d0dd      	beq.n	800072c <_puts_r+0x40>
 8000770:	f04f 35ff 	mov.w	r5, #4294967295
 8000774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000776:	07da      	lsls	r2, r3, #31
 8000778:	d405      	bmi.n	8000786 <_puts_r+0x9a>
 800077a:	89a3      	ldrh	r3, [r4, #12]
 800077c:	059b      	lsls	r3, r3, #22
 800077e:	d402      	bmi.n	8000786 <_puts_r+0x9a>
 8000780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000782:	f000 fa9e 	bl	8000cc2 <__retarget_lock_release_recursive>
 8000786:	4628      	mov	r0, r5
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	2b00      	cmp	r3, #0
 800078c:	da04      	bge.n	8000798 <_puts_r+0xac>
 800078e:	69a2      	ldr	r2, [r4, #24]
 8000790:	429a      	cmp	r2, r3
 8000792:	dc06      	bgt.n	80007a2 <_puts_r+0xb6>
 8000794:	290a      	cmp	r1, #10
 8000796:	d004      	beq.n	80007a2 <_puts_r+0xb6>
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	6022      	str	r2, [r4, #0]
 800079e:	7019      	strb	r1, [r3, #0]
 80007a0:	e7c5      	b.n	800072e <_puts_r+0x42>
 80007a2:	4622      	mov	r2, r4
 80007a4:	4628      	mov	r0, r5
 80007a6:	f000 f817 	bl	80007d8 <__swbuf_r>
 80007aa:	3001      	adds	r0, #1
 80007ac:	d1bf      	bne.n	800072e <_puts_r+0x42>
 80007ae:	e7df      	b.n	8000770 <_puts_r+0x84>
 80007b0:	6823      	ldr	r3, [r4, #0]
 80007b2:	250a      	movs	r5, #10
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	6022      	str	r2, [r4, #0]
 80007b8:	701d      	strb	r5, [r3, #0]
 80007ba:	e7db      	b.n	8000774 <_puts_r+0x88>
 80007bc:	08001158 	.word	0x08001158
 80007c0:	08001178 	.word	0x08001178
 80007c4:	08001138 	.word	0x08001138

080007c8 <puts>:
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <puts+0xc>)
 80007ca:	4601      	mov	r1, r0
 80007cc:	6818      	ldr	r0, [r3, #0]
 80007ce:	f7ff bf8d 	b.w	80006ec <_puts_r>
 80007d2:	bf00      	nop
 80007d4:	20000000 	.word	0x20000000

080007d8 <__swbuf_r>:
 80007d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007da:	460e      	mov	r6, r1
 80007dc:	4614      	mov	r4, r2
 80007de:	4605      	mov	r5, r0
 80007e0:	b118      	cbz	r0, 80007ea <__swbuf_r+0x12>
 80007e2:	6983      	ldr	r3, [r0, #24]
 80007e4:	b90b      	cbnz	r3, 80007ea <__swbuf_r+0x12>
 80007e6:	f000 f9cd 	bl	8000b84 <__sinit>
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <__swbuf_r+0x98>)
 80007ec:	429c      	cmp	r4, r3
 80007ee:	d12b      	bne.n	8000848 <__swbuf_r+0x70>
 80007f0:	686c      	ldr	r4, [r5, #4]
 80007f2:	69a3      	ldr	r3, [r4, #24]
 80007f4:	60a3      	str	r3, [r4, #8]
 80007f6:	89a3      	ldrh	r3, [r4, #12]
 80007f8:	071a      	lsls	r2, r3, #28
 80007fa:	d52f      	bpl.n	800085c <__swbuf_r+0x84>
 80007fc:	6923      	ldr	r3, [r4, #16]
 80007fe:	b36b      	cbz	r3, 800085c <__swbuf_r+0x84>
 8000800:	6923      	ldr	r3, [r4, #16]
 8000802:	6820      	ldr	r0, [r4, #0]
 8000804:	1ac0      	subs	r0, r0, r3
 8000806:	6963      	ldr	r3, [r4, #20]
 8000808:	b2f6      	uxtb	r6, r6
 800080a:	4283      	cmp	r3, r0
 800080c:	4637      	mov	r7, r6
 800080e:	dc04      	bgt.n	800081a <__swbuf_r+0x42>
 8000810:	4621      	mov	r1, r4
 8000812:	4628      	mov	r0, r5
 8000814:	f000 f922 	bl	8000a5c <_fflush_r>
 8000818:	bb30      	cbnz	r0, 8000868 <__swbuf_r+0x90>
 800081a:	68a3      	ldr	r3, [r4, #8]
 800081c:	3b01      	subs	r3, #1
 800081e:	60a3      	str	r3, [r4, #8]
 8000820:	6823      	ldr	r3, [r4, #0]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	6022      	str	r2, [r4, #0]
 8000826:	701e      	strb	r6, [r3, #0]
 8000828:	6963      	ldr	r3, [r4, #20]
 800082a:	3001      	adds	r0, #1
 800082c:	4283      	cmp	r3, r0
 800082e:	d004      	beq.n	800083a <__swbuf_r+0x62>
 8000830:	89a3      	ldrh	r3, [r4, #12]
 8000832:	07db      	lsls	r3, r3, #31
 8000834:	d506      	bpl.n	8000844 <__swbuf_r+0x6c>
 8000836:	2e0a      	cmp	r6, #10
 8000838:	d104      	bne.n	8000844 <__swbuf_r+0x6c>
 800083a:	4621      	mov	r1, r4
 800083c:	4628      	mov	r0, r5
 800083e:	f000 f90d 	bl	8000a5c <_fflush_r>
 8000842:	b988      	cbnz	r0, 8000868 <__swbuf_r+0x90>
 8000844:	4638      	mov	r0, r7
 8000846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <__swbuf_r+0x9c>)
 800084a:	429c      	cmp	r4, r3
 800084c:	d101      	bne.n	8000852 <__swbuf_r+0x7a>
 800084e:	68ac      	ldr	r4, [r5, #8]
 8000850:	e7cf      	b.n	80007f2 <__swbuf_r+0x1a>
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <__swbuf_r+0xa0>)
 8000854:	429c      	cmp	r4, r3
 8000856:	bf08      	it	eq
 8000858:	68ec      	ldreq	r4, [r5, #12]
 800085a:	e7ca      	b.n	80007f2 <__swbuf_r+0x1a>
 800085c:	4621      	mov	r1, r4
 800085e:	4628      	mov	r0, r5
 8000860:	f000 f80c 	bl	800087c <__swsetup_r>
 8000864:	2800      	cmp	r0, #0
 8000866:	d0cb      	beq.n	8000800 <__swbuf_r+0x28>
 8000868:	f04f 37ff 	mov.w	r7, #4294967295
 800086c:	e7ea      	b.n	8000844 <__swbuf_r+0x6c>
 800086e:	bf00      	nop
 8000870:	08001158 	.word	0x08001158
 8000874:	08001178 	.word	0x08001178
 8000878:	08001138 	.word	0x08001138

0800087c <__swsetup_r>:
 800087c:	4b32      	ldr	r3, [pc, #200]	; (8000948 <__swsetup_r+0xcc>)
 800087e:	b570      	push	{r4, r5, r6, lr}
 8000880:	681d      	ldr	r5, [r3, #0]
 8000882:	4606      	mov	r6, r0
 8000884:	460c      	mov	r4, r1
 8000886:	b125      	cbz	r5, 8000892 <__swsetup_r+0x16>
 8000888:	69ab      	ldr	r3, [r5, #24]
 800088a:	b913      	cbnz	r3, 8000892 <__swsetup_r+0x16>
 800088c:	4628      	mov	r0, r5
 800088e:	f000 f979 	bl	8000b84 <__sinit>
 8000892:	4b2e      	ldr	r3, [pc, #184]	; (800094c <__swsetup_r+0xd0>)
 8000894:	429c      	cmp	r4, r3
 8000896:	d10f      	bne.n	80008b8 <__swsetup_r+0x3c>
 8000898:	686c      	ldr	r4, [r5, #4]
 800089a:	89a3      	ldrh	r3, [r4, #12]
 800089c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008a0:	0719      	lsls	r1, r3, #28
 80008a2:	d42c      	bmi.n	80008fe <__swsetup_r+0x82>
 80008a4:	06dd      	lsls	r5, r3, #27
 80008a6:	d411      	bmi.n	80008cc <__swsetup_r+0x50>
 80008a8:	2309      	movs	r3, #9
 80008aa:	6033      	str	r3, [r6, #0]
 80008ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008b0:	81a3      	strh	r3, [r4, #12]
 80008b2:	f04f 30ff 	mov.w	r0, #4294967295
 80008b6:	e03e      	b.n	8000936 <__swsetup_r+0xba>
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <__swsetup_r+0xd4>)
 80008ba:	429c      	cmp	r4, r3
 80008bc:	d101      	bne.n	80008c2 <__swsetup_r+0x46>
 80008be:	68ac      	ldr	r4, [r5, #8]
 80008c0:	e7eb      	b.n	800089a <__swsetup_r+0x1e>
 80008c2:	4b24      	ldr	r3, [pc, #144]	; (8000954 <__swsetup_r+0xd8>)
 80008c4:	429c      	cmp	r4, r3
 80008c6:	bf08      	it	eq
 80008c8:	68ec      	ldreq	r4, [r5, #12]
 80008ca:	e7e6      	b.n	800089a <__swsetup_r+0x1e>
 80008cc:	0758      	lsls	r0, r3, #29
 80008ce:	d512      	bpl.n	80008f6 <__swsetup_r+0x7a>
 80008d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008d2:	b141      	cbz	r1, 80008e6 <__swsetup_r+0x6a>
 80008d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008d8:	4299      	cmp	r1, r3
 80008da:	d002      	beq.n	80008e2 <__swsetup_r+0x66>
 80008dc:	4630      	mov	r0, r6
 80008de:	f000 fa57 	bl	8000d90 <_free_r>
 80008e2:	2300      	movs	r3, #0
 80008e4:	6363      	str	r3, [r4, #52]	; 0x34
 80008e6:	89a3      	ldrh	r3, [r4, #12]
 80008e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008ec:	81a3      	strh	r3, [r4, #12]
 80008ee:	2300      	movs	r3, #0
 80008f0:	6063      	str	r3, [r4, #4]
 80008f2:	6923      	ldr	r3, [r4, #16]
 80008f4:	6023      	str	r3, [r4, #0]
 80008f6:	89a3      	ldrh	r3, [r4, #12]
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	81a3      	strh	r3, [r4, #12]
 80008fe:	6923      	ldr	r3, [r4, #16]
 8000900:	b94b      	cbnz	r3, 8000916 <__swsetup_r+0x9a>
 8000902:	89a3      	ldrh	r3, [r4, #12]
 8000904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800090c:	d003      	beq.n	8000916 <__swsetup_r+0x9a>
 800090e:	4621      	mov	r1, r4
 8000910:	4630      	mov	r0, r6
 8000912:	f000 f9fd 	bl	8000d10 <__smakebuf_r>
 8000916:	89a0      	ldrh	r0, [r4, #12]
 8000918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800091c:	f010 0301 	ands.w	r3, r0, #1
 8000920:	d00a      	beq.n	8000938 <__swsetup_r+0xbc>
 8000922:	2300      	movs	r3, #0
 8000924:	60a3      	str	r3, [r4, #8]
 8000926:	6963      	ldr	r3, [r4, #20]
 8000928:	425b      	negs	r3, r3
 800092a:	61a3      	str	r3, [r4, #24]
 800092c:	6923      	ldr	r3, [r4, #16]
 800092e:	b943      	cbnz	r3, 8000942 <__swsetup_r+0xc6>
 8000930:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000934:	d1ba      	bne.n	80008ac <__swsetup_r+0x30>
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	0781      	lsls	r1, r0, #30
 800093a:	bf58      	it	pl
 800093c:	6963      	ldrpl	r3, [r4, #20]
 800093e:	60a3      	str	r3, [r4, #8]
 8000940:	e7f4      	b.n	800092c <__swsetup_r+0xb0>
 8000942:	2000      	movs	r0, #0
 8000944:	e7f7      	b.n	8000936 <__swsetup_r+0xba>
 8000946:	bf00      	nop
 8000948:	20000000 	.word	0x20000000
 800094c:	08001158 	.word	0x08001158
 8000950:	08001178 	.word	0x08001178
 8000954:	08001138 	.word	0x08001138

08000958 <__sflush_r>:
 8000958:	898a      	ldrh	r2, [r1, #12]
 800095a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095c:	4605      	mov	r5, r0
 800095e:	0710      	lsls	r0, r2, #28
 8000960:	460c      	mov	r4, r1
 8000962:	d457      	bmi.n	8000a14 <__sflush_r+0xbc>
 8000964:	684b      	ldr	r3, [r1, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	dc04      	bgt.n	8000974 <__sflush_r+0x1c>
 800096a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800096c:	2b00      	cmp	r3, #0
 800096e:	dc01      	bgt.n	8000974 <__sflush_r+0x1c>
 8000970:	2000      	movs	r0, #0
 8000972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000976:	2e00      	cmp	r6, #0
 8000978:	d0fa      	beq.n	8000970 <__sflush_r+0x18>
 800097a:	2300      	movs	r3, #0
 800097c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000980:	682f      	ldr	r7, [r5, #0]
 8000982:	602b      	str	r3, [r5, #0]
 8000984:	d032      	beq.n	80009ec <__sflush_r+0x94>
 8000986:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000988:	89a3      	ldrh	r3, [r4, #12]
 800098a:	075a      	lsls	r2, r3, #29
 800098c:	d505      	bpl.n	800099a <__sflush_r+0x42>
 800098e:	6863      	ldr	r3, [r4, #4]
 8000990:	1ac0      	subs	r0, r0, r3
 8000992:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000994:	b10b      	cbz	r3, 800099a <__sflush_r+0x42>
 8000996:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000998:	1ac0      	subs	r0, r0, r3
 800099a:	2300      	movs	r3, #0
 800099c:	4602      	mov	r2, r0
 800099e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009a0:	6a21      	ldr	r1, [r4, #32]
 80009a2:	4628      	mov	r0, r5
 80009a4:	47b0      	blx	r6
 80009a6:	1c43      	adds	r3, r0, #1
 80009a8:	89a3      	ldrh	r3, [r4, #12]
 80009aa:	d106      	bne.n	80009ba <__sflush_r+0x62>
 80009ac:	6829      	ldr	r1, [r5, #0]
 80009ae:	291d      	cmp	r1, #29
 80009b0:	d82c      	bhi.n	8000a0c <__sflush_r+0xb4>
 80009b2:	4a29      	ldr	r2, [pc, #164]	; (8000a58 <__sflush_r+0x100>)
 80009b4:	40ca      	lsrs	r2, r1
 80009b6:	07d6      	lsls	r6, r2, #31
 80009b8:	d528      	bpl.n	8000a0c <__sflush_r+0xb4>
 80009ba:	2200      	movs	r2, #0
 80009bc:	6062      	str	r2, [r4, #4]
 80009be:	04d9      	lsls	r1, r3, #19
 80009c0:	6922      	ldr	r2, [r4, #16]
 80009c2:	6022      	str	r2, [r4, #0]
 80009c4:	d504      	bpl.n	80009d0 <__sflush_r+0x78>
 80009c6:	1c42      	adds	r2, r0, #1
 80009c8:	d101      	bne.n	80009ce <__sflush_r+0x76>
 80009ca:	682b      	ldr	r3, [r5, #0]
 80009cc:	b903      	cbnz	r3, 80009d0 <__sflush_r+0x78>
 80009ce:	6560      	str	r0, [r4, #84]	; 0x54
 80009d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009d2:	602f      	str	r7, [r5, #0]
 80009d4:	2900      	cmp	r1, #0
 80009d6:	d0cb      	beq.n	8000970 <__sflush_r+0x18>
 80009d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009dc:	4299      	cmp	r1, r3
 80009de:	d002      	beq.n	80009e6 <__sflush_r+0x8e>
 80009e0:	4628      	mov	r0, r5
 80009e2:	f000 f9d5 	bl	8000d90 <_free_r>
 80009e6:	2000      	movs	r0, #0
 80009e8:	6360      	str	r0, [r4, #52]	; 0x34
 80009ea:	e7c2      	b.n	8000972 <__sflush_r+0x1a>
 80009ec:	6a21      	ldr	r1, [r4, #32]
 80009ee:	2301      	movs	r3, #1
 80009f0:	4628      	mov	r0, r5
 80009f2:	47b0      	blx	r6
 80009f4:	1c41      	adds	r1, r0, #1
 80009f6:	d1c7      	bne.n	8000988 <__sflush_r+0x30>
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d0c4      	beq.n	8000988 <__sflush_r+0x30>
 80009fe:	2b1d      	cmp	r3, #29
 8000a00:	d001      	beq.n	8000a06 <__sflush_r+0xae>
 8000a02:	2b16      	cmp	r3, #22
 8000a04:	d101      	bne.n	8000a0a <__sflush_r+0xb2>
 8000a06:	602f      	str	r7, [r5, #0]
 8000a08:	e7b2      	b.n	8000970 <__sflush_r+0x18>
 8000a0a:	89a3      	ldrh	r3, [r4, #12]
 8000a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a10:	81a3      	strh	r3, [r4, #12]
 8000a12:	e7ae      	b.n	8000972 <__sflush_r+0x1a>
 8000a14:	690f      	ldr	r7, [r1, #16]
 8000a16:	2f00      	cmp	r7, #0
 8000a18:	d0aa      	beq.n	8000970 <__sflush_r+0x18>
 8000a1a:	0793      	lsls	r3, r2, #30
 8000a1c:	680e      	ldr	r6, [r1, #0]
 8000a1e:	bf08      	it	eq
 8000a20:	694b      	ldreq	r3, [r1, #20]
 8000a22:	600f      	str	r7, [r1, #0]
 8000a24:	bf18      	it	ne
 8000a26:	2300      	movne	r3, #0
 8000a28:	1bf6      	subs	r6, r6, r7
 8000a2a:	608b      	str	r3, [r1, #8]
 8000a2c:	2e00      	cmp	r6, #0
 8000a2e:	dd9f      	ble.n	8000970 <__sflush_r+0x18>
 8000a30:	6a21      	ldr	r1, [r4, #32]
 8000a32:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000a36:	4633      	mov	r3, r6
 8000a38:	463a      	mov	r2, r7
 8000a3a:	4628      	mov	r0, r5
 8000a3c:	47e0      	blx	ip
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	dc06      	bgt.n	8000a50 <__sflush_r+0xf8>
 8000a42:	89a3      	ldrh	r3, [r4, #12]
 8000a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a48:	81a3      	strh	r3, [r4, #12]
 8000a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4e:	e790      	b.n	8000972 <__sflush_r+0x1a>
 8000a50:	4407      	add	r7, r0
 8000a52:	1a36      	subs	r6, r6, r0
 8000a54:	e7ea      	b.n	8000a2c <__sflush_r+0xd4>
 8000a56:	bf00      	nop
 8000a58:	20400001 	.word	0x20400001

08000a5c <_fflush_r>:
 8000a5c:	b538      	push	{r3, r4, r5, lr}
 8000a5e:	690b      	ldr	r3, [r1, #16]
 8000a60:	4605      	mov	r5, r0
 8000a62:	460c      	mov	r4, r1
 8000a64:	b913      	cbnz	r3, 8000a6c <_fflush_r+0x10>
 8000a66:	2500      	movs	r5, #0
 8000a68:	4628      	mov	r0, r5
 8000a6a:	bd38      	pop	{r3, r4, r5, pc}
 8000a6c:	b118      	cbz	r0, 8000a76 <_fflush_r+0x1a>
 8000a6e:	6983      	ldr	r3, [r0, #24]
 8000a70:	b90b      	cbnz	r3, 8000a76 <_fflush_r+0x1a>
 8000a72:	f000 f887 	bl	8000b84 <__sinit>
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <_fflush_r+0x6c>)
 8000a78:	429c      	cmp	r4, r3
 8000a7a:	d11b      	bne.n	8000ab4 <_fflush_r+0x58>
 8000a7c:	686c      	ldr	r4, [r5, #4]
 8000a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0ef      	beq.n	8000a66 <_fflush_r+0xa>
 8000a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a88:	07d0      	lsls	r0, r2, #31
 8000a8a:	d404      	bmi.n	8000a96 <_fflush_r+0x3a>
 8000a8c:	0599      	lsls	r1, r3, #22
 8000a8e:	d402      	bmi.n	8000a96 <_fflush_r+0x3a>
 8000a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a92:	f000 f915 	bl	8000cc0 <__retarget_lock_acquire_recursive>
 8000a96:	4628      	mov	r0, r5
 8000a98:	4621      	mov	r1, r4
 8000a9a:	f7ff ff5d 	bl	8000958 <__sflush_r>
 8000a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000aa0:	07da      	lsls	r2, r3, #31
 8000aa2:	4605      	mov	r5, r0
 8000aa4:	d4e0      	bmi.n	8000a68 <_fflush_r+0xc>
 8000aa6:	89a3      	ldrh	r3, [r4, #12]
 8000aa8:	059b      	lsls	r3, r3, #22
 8000aaa:	d4dd      	bmi.n	8000a68 <_fflush_r+0xc>
 8000aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000aae:	f000 f908 	bl	8000cc2 <__retarget_lock_release_recursive>
 8000ab2:	e7d9      	b.n	8000a68 <_fflush_r+0xc>
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <_fflush_r+0x70>)
 8000ab6:	429c      	cmp	r4, r3
 8000ab8:	d101      	bne.n	8000abe <_fflush_r+0x62>
 8000aba:	68ac      	ldr	r4, [r5, #8]
 8000abc:	e7df      	b.n	8000a7e <_fflush_r+0x22>
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <_fflush_r+0x74>)
 8000ac0:	429c      	cmp	r4, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	68ec      	ldreq	r4, [r5, #12]
 8000ac6:	e7da      	b.n	8000a7e <_fflush_r+0x22>
 8000ac8:	08001158 	.word	0x08001158
 8000acc:	08001178 	.word	0x08001178
 8000ad0:	08001138 	.word	0x08001138

08000ad4 <std>:
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	b510      	push	{r4, lr}
 8000ad8:	4604      	mov	r4, r0
 8000ada:	e9c0 3300 	strd	r3, r3, [r0]
 8000ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ae2:	6083      	str	r3, [r0, #8]
 8000ae4:	8181      	strh	r1, [r0, #12]
 8000ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8000ae8:	81c2      	strh	r2, [r0, #14]
 8000aea:	6183      	str	r3, [r0, #24]
 8000aec:	4619      	mov	r1, r3
 8000aee:	2208      	movs	r2, #8
 8000af0:	305c      	adds	r0, #92	; 0x5c
 8000af2:	f7ff fdf3 	bl	80006dc <memset>
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <std+0x38>)
 8000af8:	6263      	str	r3, [r4, #36]	; 0x24
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <std+0x3c>)
 8000afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <std+0x40>)
 8000b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <std+0x44>)
 8000b04:	6224      	str	r4, [r4, #32]
 8000b06:	6323      	str	r3, [r4, #48]	; 0x30
 8000b08:	bd10      	pop	{r4, pc}
 8000b0a:	bf00      	nop
 8000b0c:	08000f6d 	.word	0x08000f6d
 8000b10:	08000f8f 	.word	0x08000f8f
 8000b14:	08000fc7 	.word	0x08000fc7
 8000b18:	08000feb 	.word	0x08000feb

08000b1c <_cleanup_r>:
 8000b1c:	4901      	ldr	r1, [pc, #4]	; (8000b24 <_cleanup_r+0x8>)
 8000b1e:	f000 b8af 	b.w	8000c80 <_fwalk_reent>
 8000b22:	bf00      	nop
 8000b24:	08000a5d 	.word	0x08000a5d

08000b28 <__sfmoreglue>:
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	2268      	movs	r2, #104	; 0x68
 8000b2c:	1e4d      	subs	r5, r1, #1
 8000b2e:	4355      	muls	r5, r2
 8000b30:	460e      	mov	r6, r1
 8000b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b36:	f000 f995 	bl	8000e64 <_malloc_r>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	b140      	cbz	r0, 8000b50 <__sfmoreglue+0x28>
 8000b3e:	2100      	movs	r1, #0
 8000b40:	e9c0 1600 	strd	r1, r6, [r0]
 8000b44:	300c      	adds	r0, #12
 8000b46:	60a0      	str	r0, [r4, #8]
 8000b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b4c:	f7ff fdc6 	bl	80006dc <memset>
 8000b50:	4620      	mov	r0, r4
 8000b52:	bd70      	pop	{r4, r5, r6, pc}

08000b54 <__sfp_lock_acquire>:
 8000b54:	4801      	ldr	r0, [pc, #4]	; (8000b5c <__sfp_lock_acquire+0x8>)
 8000b56:	f000 b8b3 	b.w	8000cc0 <__retarget_lock_acquire_recursive>
 8000b5a:	bf00      	nop
 8000b5c:	20000085 	.word	0x20000085

08000b60 <__sfp_lock_release>:
 8000b60:	4801      	ldr	r0, [pc, #4]	; (8000b68 <__sfp_lock_release+0x8>)
 8000b62:	f000 b8ae 	b.w	8000cc2 <__retarget_lock_release_recursive>
 8000b66:	bf00      	nop
 8000b68:	20000085 	.word	0x20000085

08000b6c <__sinit_lock_acquire>:
 8000b6c:	4801      	ldr	r0, [pc, #4]	; (8000b74 <__sinit_lock_acquire+0x8>)
 8000b6e:	f000 b8a7 	b.w	8000cc0 <__retarget_lock_acquire_recursive>
 8000b72:	bf00      	nop
 8000b74:	20000086 	.word	0x20000086

08000b78 <__sinit_lock_release>:
 8000b78:	4801      	ldr	r0, [pc, #4]	; (8000b80 <__sinit_lock_release+0x8>)
 8000b7a:	f000 b8a2 	b.w	8000cc2 <__retarget_lock_release_recursive>
 8000b7e:	bf00      	nop
 8000b80:	20000086 	.word	0x20000086

08000b84 <__sinit>:
 8000b84:	b510      	push	{r4, lr}
 8000b86:	4604      	mov	r4, r0
 8000b88:	f7ff fff0 	bl	8000b6c <__sinit_lock_acquire>
 8000b8c:	69a3      	ldr	r3, [r4, #24]
 8000b8e:	b11b      	cbz	r3, 8000b98 <__sinit+0x14>
 8000b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b94:	f7ff bff0 	b.w	8000b78 <__sinit_lock_release>
 8000b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <__sinit+0x68>)
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <__sinit+0x6c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000ba6:	42a3      	cmp	r3, r4
 8000ba8:	bf04      	itt	eq
 8000baa:	2301      	moveq	r3, #1
 8000bac:	61a3      	streq	r3, [r4, #24]
 8000bae:	4620      	mov	r0, r4
 8000bb0:	f000 f820 	bl	8000bf4 <__sfp>
 8000bb4:	6060      	str	r0, [r4, #4]
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f000 f81c 	bl	8000bf4 <__sfp>
 8000bbc:	60a0      	str	r0, [r4, #8]
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f000 f818 	bl	8000bf4 <__sfp>
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60e0      	str	r0, [r4, #12]
 8000bc8:	2104      	movs	r1, #4
 8000bca:	6860      	ldr	r0, [r4, #4]
 8000bcc:	f7ff ff82 	bl	8000ad4 <std>
 8000bd0:	68a0      	ldr	r0, [r4, #8]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2109      	movs	r1, #9
 8000bd6:	f7ff ff7d 	bl	8000ad4 <std>
 8000bda:	68e0      	ldr	r0, [r4, #12]
 8000bdc:	2202      	movs	r2, #2
 8000bde:	2112      	movs	r1, #18
 8000be0:	f7ff ff78 	bl	8000ad4 <std>
 8000be4:	2301      	movs	r3, #1
 8000be6:	61a3      	str	r3, [r4, #24]
 8000be8:	e7d2      	b.n	8000b90 <__sinit+0xc>
 8000bea:	bf00      	nop
 8000bec:	08001134 	.word	0x08001134
 8000bf0:	08000b1d 	.word	0x08000b1d

08000bf4 <__sfp>:
 8000bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf6:	4607      	mov	r7, r0
 8000bf8:	f7ff ffac 	bl	8000b54 <__sfp_lock_acquire>
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <__sfp+0x84>)
 8000bfe:	681e      	ldr	r6, [r3, #0]
 8000c00:	69b3      	ldr	r3, [r6, #24]
 8000c02:	b913      	cbnz	r3, 8000c0a <__sfp+0x16>
 8000c04:	4630      	mov	r0, r6
 8000c06:	f7ff ffbd 	bl	8000b84 <__sinit>
 8000c0a:	3648      	adds	r6, #72	; 0x48
 8000c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	d503      	bpl.n	8000c1c <__sfp+0x28>
 8000c14:	6833      	ldr	r3, [r6, #0]
 8000c16:	b30b      	cbz	r3, 8000c5c <__sfp+0x68>
 8000c18:	6836      	ldr	r6, [r6, #0]
 8000c1a:	e7f7      	b.n	8000c0c <__sfp+0x18>
 8000c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c20:	b9d5      	cbnz	r5, 8000c58 <__sfp+0x64>
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <__sfp+0x88>)
 8000c24:	60e3      	str	r3, [r4, #12]
 8000c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c2a:	6665      	str	r5, [r4, #100]	; 0x64
 8000c2c:	f000 f847 	bl	8000cbe <__retarget_lock_init_recursive>
 8000c30:	f7ff ff96 	bl	8000b60 <__sfp_lock_release>
 8000c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c3c:	6025      	str	r5, [r4, #0]
 8000c3e:	61a5      	str	r5, [r4, #24]
 8000c40:	2208      	movs	r2, #8
 8000c42:	4629      	mov	r1, r5
 8000c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c48:	f7ff fd48 	bl	80006dc <memset>
 8000c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c54:	4620      	mov	r0, r4
 8000c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c58:	3468      	adds	r4, #104	; 0x68
 8000c5a:	e7d9      	b.n	8000c10 <__sfp+0x1c>
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	4638      	mov	r0, r7
 8000c60:	f7ff ff62 	bl	8000b28 <__sfmoreglue>
 8000c64:	4604      	mov	r4, r0
 8000c66:	6030      	str	r0, [r6, #0]
 8000c68:	2800      	cmp	r0, #0
 8000c6a:	d1d5      	bne.n	8000c18 <__sfp+0x24>
 8000c6c:	f7ff ff78 	bl	8000b60 <__sfp_lock_release>
 8000c70:	230c      	movs	r3, #12
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	e7ee      	b.n	8000c54 <__sfp+0x60>
 8000c76:	bf00      	nop
 8000c78:	08001134 	.word	0x08001134
 8000c7c:	ffff0001 	.word	0xffff0001

08000c80 <_fwalk_reent>:
 8000c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c84:	4606      	mov	r6, r0
 8000c86:	4688      	mov	r8, r1
 8000c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c92:	f1b9 0901 	subs.w	r9, r9, #1
 8000c96:	d505      	bpl.n	8000ca4 <_fwalk_reent+0x24>
 8000c98:	6824      	ldr	r4, [r4, #0]
 8000c9a:	2c00      	cmp	r4, #0
 8000c9c:	d1f7      	bne.n	8000c8e <_fwalk_reent+0xe>
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ca4:	89ab      	ldrh	r3, [r5, #12]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d907      	bls.n	8000cba <_fwalk_reent+0x3a>
 8000caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	d003      	beq.n	8000cba <_fwalk_reent+0x3a>
 8000cb2:	4629      	mov	r1, r5
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	47c0      	blx	r8
 8000cb8:	4307      	orrs	r7, r0
 8000cba:	3568      	adds	r5, #104	; 0x68
 8000cbc:	e7e9      	b.n	8000c92 <_fwalk_reent+0x12>

08000cbe <__retarget_lock_init_recursive>:
 8000cbe:	4770      	bx	lr

08000cc0 <__retarget_lock_acquire_recursive>:
 8000cc0:	4770      	bx	lr

08000cc2 <__retarget_lock_release_recursive>:
 8000cc2:	4770      	bx	lr

08000cc4 <__swhatbuf_r>:
 8000cc4:	b570      	push	{r4, r5, r6, lr}
 8000cc6:	460e      	mov	r6, r1
 8000cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	b096      	sub	sp, #88	; 0x58
 8000cd0:	4614      	mov	r4, r2
 8000cd2:	461d      	mov	r5, r3
 8000cd4:	da08      	bge.n	8000ce8 <__swhatbuf_r+0x24>
 8000cd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	602a      	str	r2, [r5, #0]
 8000cde:	061a      	lsls	r2, r3, #24
 8000ce0:	d410      	bmi.n	8000d04 <__swhatbuf_r+0x40>
 8000ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce6:	e00e      	b.n	8000d06 <__swhatbuf_r+0x42>
 8000ce8:	466a      	mov	r2, sp
 8000cea:	f000 f9a5 	bl	8001038 <_fstat_r>
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	dbf1      	blt.n	8000cd6 <__swhatbuf_r+0x12>
 8000cf2:	9a01      	ldr	r2, [sp, #4]
 8000cf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000cf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000cfc:	425a      	negs	r2, r3
 8000cfe:	415a      	adcs	r2, r3
 8000d00:	602a      	str	r2, [r5, #0]
 8000d02:	e7ee      	b.n	8000ce2 <__swhatbuf_r+0x1e>
 8000d04:	2340      	movs	r3, #64	; 0x40
 8000d06:	2000      	movs	r0, #0
 8000d08:	6023      	str	r3, [r4, #0]
 8000d0a:	b016      	add	sp, #88	; 0x58
 8000d0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d10 <__smakebuf_r>:
 8000d10:	898b      	ldrh	r3, [r1, #12]
 8000d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d14:	079d      	lsls	r5, r3, #30
 8000d16:	4606      	mov	r6, r0
 8000d18:	460c      	mov	r4, r1
 8000d1a:	d507      	bpl.n	8000d2c <__smakebuf_r+0x1c>
 8000d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d20:	6023      	str	r3, [r4, #0]
 8000d22:	6123      	str	r3, [r4, #16]
 8000d24:	2301      	movs	r3, #1
 8000d26:	6163      	str	r3, [r4, #20]
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
 8000d2c:	ab01      	add	r3, sp, #4
 8000d2e:	466a      	mov	r2, sp
 8000d30:	f7ff ffc8 	bl	8000cc4 <__swhatbuf_r>
 8000d34:	9900      	ldr	r1, [sp, #0]
 8000d36:	4605      	mov	r5, r0
 8000d38:	4630      	mov	r0, r6
 8000d3a:	f000 f893 	bl	8000e64 <_malloc_r>
 8000d3e:	b948      	cbnz	r0, 8000d54 <__smakebuf_r+0x44>
 8000d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d44:	059a      	lsls	r2, r3, #22
 8000d46:	d4ef      	bmi.n	8000d28 <__smakebuf_r+0x18>
 8000d48:	f023 0303 	bic.w	r3, r3, #3
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	81a3      	strh	r3, [r4, #12]
 8000d52:	e7e3      	b.n	8000d1c <__smakebuf_r+0xc>
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <__smakebuf_r+0x7c>)
 8000d56:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d58:	89a3      	ldrh	r3, [r4, #12]
 8000d5a:	6020      	str	r0, [r4, #0]
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	81a3      	strh	r3, [r4, #12]
 8000d62:	9b00      	ldr	r3, [sp, #0]
 8000d64:	6163      	str	r3, [r4, #20]
 8000d66:	9b01      	ldr	r3, [sp, #4]
 8000d68:	6120      	str	r0, [r4, #16]
 8000d6a:	b15b      	cbz	r3, 8000d84 <__smakebuf_r+0x74>
 8000d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d70:	4630      	mov	r0, r6
 8000d72:	f000 f973 	bl	800105c <_isatty_r>
 8000d76:	b128      	cbz	r0, 8000d84 <__smakebuf_r+0x74>
 8000d78:	89a3      	ldrh	r3, [r4, #12]
 8000d7a:	f023 0303 	bic.w	r3, r3, #3
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	81a3      	strh	r3, [r4, #12]
 8000d84:	89a0      	ldrh	r0, [r4, #12]
 8000d86:	4305      	orrs	r5, r0
 8000d88:	81a5      	strh	r5, [r4, #12]
 8000d8a:	e7cd      	b.n	8000d28 <__smakebuf_r+0x18>
 8000d8c:	08000b1d 	.word	0x08000b1d

08000d90 <_free_r>:
 8000d90:	b538      	push	{r3, r4, r5, lr}
 8000d92:	4605      	mov	r5, r0
 8000d94:	2900      	cmp	r1, #0
 8000d96:	d041      	beq.n	8000e1c <_free_r+0x8c>
 8000d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d9c:	1f0c      	subs	r4, r1, #4
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bfb8      	it	lt
 8000da2:	18e4      	addlt	r4, r4, r3
 8000da4:	f000 f97c 	bl	80010a0 <__malloc_lock>
 8000da8:	4a1d      	ldr	r2, [pc, #116]	; (8000e20 <_free_r+0x90>)
 8000daa:	6813      	ldr	r3, [r2, #0]
 8000dac:	b933      	cbnz	r3, 8000dbc <_free_r+0x2c>
 8000dae:	6063      	str	r3, [r4, #4]
 8000db0:	6014      	str	r4, [r2, #0]
 8000db2:	4628      	mov	r0, r5
 8000db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db8:	f000 b978 	b.w	80010ac <__malloc_unlock>
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d908      	bls.n	8000dd2 <_free_r+0x42>
 8000dc0:	6820      	ldr	r0, [r4, #0]
 8000dc2:	1821      	adds	r1, r4, r0
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	bf01      	itttt	eq
 8000dc8:	6819      	ldreq	r1, [r3, #0]
 8000dca:	685b      	ldreq	r3, [r3, #4]
 8000dcc:	1809      	addeq	r1, r1, r0
 8000dce:	6021      	streq	r1, [r4, #0]
 8000dd0:	e7ed      	b.n	8000dae <_free_r+0x1e>
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	b10b      	cbz	r3, 8000ddc <_free_r+0x4c>
 8000dd8:	42a3      	cmp	r3, r4
 8000dda:	d9fa      	bls.n	8000dd2 <_free_r+0x42>
 8000ddc:	6811      	ldr	r1, [r2, #0]
 8000dde:	1850      	adds	r0, r2, r1
 8000de0:	42a0      	cmp	r0, r4
 8000de2:	d10b      	bne.n	8000dfc <_free_r+0x6c>
 8000de4:	6820      	ldr	r0, [r4, #0]
 8000de6:	4401      	add	r1, r0
 8000de8:	1850      	adds	r0, r2, r1
 8000dea:	4283      	cmp	r3, r0
 8000dec:	6011      	str	r1, [r2, #0]
 8000dee:	d1e0      	bne.n	8000db2 <_free_r+0x22>
 8000df0:	6818      	ldr	r0, [r3, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	6053      	str	r3, [r2, #4]
 8000df6:	4401      	add	r1, r0
 8000df8:	6011      	str	r1, [r2, #0]
 8000dfa:	e7da      	b.n	8000db2 <_free_r+0x22>
 8000dfc:	d902      	bls.n	8000e04 <_free_r+0x74>
 8000dfe:	230c      	movs	r3, #12
 8000e00:	602b      	str	r3, [r5, #0]
 8000e02:	e7d6      	b.n	8000db2 <_free_r+0x22>
 8000e04:	6820      	ldr	r0, [r4, #0]
 8000e06:	1821      	adds	r1, r4, r0
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	bf04      	itt	eq
 8000e0c:	6819      	ldreq	r1, [r3, #0]
 8000e0e:	685b      	ldreq	r3, [r3, #4]
 8000e10:	6063      	str	r3, [r4, #4]
 8000e12:	bf04      	itt	eq
 8000e14:	1809      	addeq	r1, r1, r0
 8000e16:	6021      	streq	r1, [r4, #0]
 8000e18:	6054      	str	r4, [r2, #4]
 8000e1a:	e7ca      	b.n	8000db2 <_free_r+0x22>
 8000e1c:	bd38      	pop	{r3, r4, r5, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000088 	.word	0x20000088

08000e24 <sbrk_aligned>:
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	4e0e      	ldr	r6, [pc, #56]	; (8000e60 <sbrk_aligned+0x3c>)
 8000e28:	460c      	mov	r4, r1
 8000e2a:	6831      	ldr	r1, [r6, #0]
 8000e2c:	4605      	mov	r5, r0
 8000e2e:	b911      	cbnz	r1, 8000e36 <sbrk_aligned+0x12>
 8000e30:	f000 f88c 	bl	8000f4c <_sbrk_r>
 8000e34:	6030      	str	r0, [r6, #0]
 8000e36:	4621      	mov	r1, r4
 8000e38:	4628      	mov	r0, r5
 8000e3a:	f000 f887 	bl	8000f4c <_sbrk_r>
 8000e3e:	1c43      	adds	r3, r0, #1
 8000e40:	d00a      	beq.n	8000e58 <sbrk_aligned+0x34>
 8000e42:	1cc4      	adds	r4, r0, #3
 8000e44:	f024 0403 	bic.w	r4, r4, #3
 8000e48:	42a0      	cmp	r0, r4
 8000e4a:	d007      	beq.n	8000e5c <sbrk_aligned+0x38>
 8000e4c:	1a21      	subs	r1, r4, r0
 8000e4e:	4628      	mov	r0, r5
 8000e50:	f000 f87c 	bl	8000f4c <_sbrk_r>
 8000e54:	3001      	adds	r0, #1
 8000e56:	d101      	bne.n	8000e5c <sbrk_aligned+0x38>
 8000e58:	f04f 34ff 	mov.w	r4, #4294967295
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	bd70      	pop	{r4, r5, r6, pc}
 8000e60:	2000008c 	.word	0x2000008c

08000e64 <_malloc_r>:
 8000e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e68:	1ccd      	adds	r5, r1, #3
 8000e6a:	f025 0503 	bic.w	r5, r5, #3
 8000e6e:	3508      	adds	r5, #8
 8000e70:	2d0c      	cmp	r5, #12
 8000e72:	bf38      	it	cc
 8000e74:	250c      	movcc	r5, #12
 8000e76:	2d00      	cmp	r5, #0
 8000e78:	4607      	mov	r7, r0
 8000e7a:	db01      	blt.n	8000e80 <_malloc_r+0x1c>
 8000e7c:	42a9      	cmp	r1, r5
 8000e7e:	d905      	bls.n	8000e8c <_malloc_r+0x28>
 8000e80:	230c      	movs	r3, #12
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	2600      	movs	r6, #0
 8000e86:	4630      	mov	r0, r6
 8000e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e8c:	4e2e      	ldr	r6, [pc, #184]	; (8000f48 <_malloc_r+0xe4>)
 8000e8e:	f000 f907 	bl	80010a0 <__malloc_lock>
 8000e92:	6833      	ldr	r3, [r6, #0]
 8000e94:	461c      	mov	r4, r3
 8000e96:	bb34      	cbnz	r4, 8000ee6 <_malloc_r+0x82>
 8000e98:	4629      	mov	r1, r5
 8000e9a:	4638      	mov	r0, r7
 8000e9c:	f7ff ffc2 	bl	8000e24 <sbrk_aligned>
 8000ea0:	1c43      	adds	r3, r0, #1
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	d14d      	bne.n	8000f42 <_malloc_r+0xde>
 8000ea6:	6834      	ldr	r4, [r6, #0]
 8000ea8:	4626      	mov	r6, r4
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	d140      	bne.n	8000f30 <_malloc_r+0xcc>
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	4638      	mov	r0, r7
 8000eb4:	eb04 0803 	add.w	r8, r4, r3
 8000eb8:	f000 f848 	bl	8000f4c <_sbrk_r>
 8000ebc:	4580      	cmp	r8, r0
 8000ebe:	d13a      	bne.n	8000f36 <_malloc_r+0xd2>
 8000ec0:	6821      	ldr	r1, [r4, #0]
 8000ec2:	3503      	adds	r5, #3
 8000ec4:	1a6d      	subs	r5, r5, r1
 8000ec6:	f025 0503 	bic.w	r5, r5, #3
 8000eca:	3508      	adds	r5, #8
 8000ecc:	2d0c      	cmp	r5, #12
 8000ece:	bf38      	it	cc
 8000ed0:	250c      	movcc	r5, #12
 8000ed2:	4629      	mov	r1, r5
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	f7ff ffa5 	bl	8000e24 <sbrk_aligned>
 8000eda:	3001      	adds	r0, #1
 8000edc:	d02b      	beq.n	8000f36 <_malloc_r+0xd2>
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	442b      	add	r3, r5
 8000ee2:	6023      	str	r3, [r4, #0]
 8000ee4:	e00e      	b.n	8000f04 <_malloc_r+0xa0>
 8000ee6:	6822      	ldr	r2, [r4, #0]
 8000ee8:	1b52      	subs	r2, r2, r5
 8000eea:	d41e      	bmi.n	8000f2a <_malloc_r+0xc6>
 8000eec:	2a0b      	cmp	r2, #11
 8000eee:	d916      	bls.n	8000f1e <_malloc_r+0xba>
 8000ef0:	1961      	adds	r1, r4, r5
 8000ef2:	42a3      	cmp	r3, r4
 8000ef4:	6025      	str	r5, [r4, #0]
 8000ef6:	bf18      	it	ne
 8000ef8:	6059      	strne	r1, [r3, #4]
 8000efa:	6863      	ldr	r3, [r4, #4]
 8000efc:	bf08      	it	eq
 8000efe:	6031      	streq	r1, [r6, #0]
 8000f00:	5162      	str	r2, [r4, r5]
 8000f02:	604b      	str	r3, [r1, #4]
 8000f04:	4638      	mov	r0, r7
 8000f06:	f104 060b 	add.w	r6, r4, #11
 8000f0a:	f000 f8cf 	bl	80010ac <__malloc_unlock>
 8000f0e:	f026 0607 	bic.w	r6, r6, #7
 8000f12:	1d23      	adds	r3, r4, #4
 8000f14:	1af2      	subs	r2, r6, r3
 8000f16:	d0b6      	beq.n	8000e86 <_malloc_r+0x22>
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	50a3      	str	r3, [r4, r2]
 8000f1c:	e7b3      	b.n	8000e86 <_malloc_r+0x22>
 8000f1e:	6862      	ldr	r2, [r4, #4]
 8000f20:	42a3      	cmp	r3, r4
 8000f22:	bf0c      	ite	eq
 8000f24:	6032      	streq	r2, [r6, #0]
 8000f26:	605a      	strne	r2, [r3, #4]
 8000f28:	e7ec      	b.n	8000f04 <_malloc_r+0xa0>
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	6864      	ldr	r4, [r4, #4]
 8000f2e:	e7b2      	b.n	8000e96 <_malloc_r+0x32>
 8000f30:	4634      	mov	r4, r6
 8000f32:	6876      	ldr	r6, [r6, #4]
 8000f34:	e7b9      	b.n	8000eaa <_malloc_r+0x46>
 8000f36:	230c      	movs	r3, #12
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	4638      	mov	r0, r7
 8000f3c:	f000 f8b6 	bl	80010ac <__malloc_unlock>
 8000f40:	e7a1      	b.n	8000e86 <_malloc_r+0x22>
 8000f42:	6025      	str	r5, [r4, #0]
 8000f44:	e7de      	b.n	8000f04 <_malloc_r+0xa0>
 8000f46:	bf00      	nop
 8000f48:	20000088 	.word	0x20000088

08000f4c <_sbrk_r>:
 8000f4c:	b538      	push	{r3, r4, r5, lr}
 8000f4e:	4d06      	ldr	r5, [pc, #24]	; (8000f68 <_sbrk_r+0x1c>)
 8000f50:	2300      	movs	r3, #0
 8000f52:	4604      	mov	r4, r0
 8000f54:	4608      	mov	r0, r1
 8000f56:	602b      	str	r3, [r5, #0]
 8000f58:	f7ff fb36 	bl	80005c8 <_sbrk>
 8000f5c:	1c43      	adds	r3, r0, #1
 8000f5e:	d102      	bne.n	8000f66 <_sbrk_r+0x1a>
 8000f60:	682b      	ldr	r3, [r5, #0]
 8000f62:	b103      	cbz	r3, 8000f66 <_sbrk_r+0x1a>
 8000f64:	6023      	str	r3, [r4, #0]
 8000f66:	bd38      	pop	{r3, r4, r5, pc}
 8000f68:	20000090 	.word	0x20000090

08000f6c <__sread>:
 8000f6c:	b510      	push	{r4, lr}
 8000f6e:	460c      	mov	r4, r1
 8000f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f74:	f000 f8a0 	bl	80010b8 <_read_r>
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	bfab      	itete	ge
 8000f7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8000f80:	181b      	addge	r3, r3, r0
 8000f82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f86:	bfac      	ite	ge
 8000f88:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f8a:	81a3      	strhlt	r3, [r4, #12]
 8000f8c:	bd10      	pop	{r4, pc}

08000f8e <__swrite>:
 8000f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f92:	461f      	mov	r7, r3
 8000f94:	898b      	ldrh	r3, [r1, #12]
 8000f96:	05db      	lsls	r3, r3, #23
 8000f98:	4605      	mov	r5, r0
 8000f9a:	460c      	mov	r4, r1
 8000f9c:	4616      	mov	r6, r2
 8000f9e:	d505      	bpl.n	8000fac <__swrite+0x1e>
 8000fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f000 f868 	bl	800107c <_lseek_r>
 8000fac:	89a3      	ldrh	r3, [r4, #12]
 8000fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fb6:	81a3      	strh	r3, [r4, #12]
 8000fb8:	4632      	mov	r2, r6
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc2:	f000 b817 	b.w	8000ff4 <_write_r>

08000fc6 <__sseek>:
 8000fc6:	b510      	push	{r4, lr}
 8000fc8:	460c      	mov	r4, r1
 8000fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fce:	f000 f855 	bl	800107c <_lseek_r>
 8000fd2:	1c43      	adds	r3, r0, #1
 8000fd4:	89a3      	ldrh	r3, [r4, #12]
 8000fd6:	bf15      	itete	ne
 8000fd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8000fda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000fde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000fe2:	81a3      	strheq	r3, [r4, #12]
 8000fe4:	bf18      	it	ne
 8000fe6:	81a3      	strhne	r3, [r4, #12]
 8000fe8:	bd10      	pop	{r4, pc}

08000fea <__sclose>:
 8000fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fee:	f000 b813 	b.w	8001018 <_close_r>
	...

08000ff4 <_write_r>:
 8000ff4:	b538      	push	{r3, r4, r5, lr}
 8000ff6:	4d07      	ldr	r5, [pc, #28]	; (8001014 <_write_r+0x20>)
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	602a      	str	r2, [r5, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	f7ff fa93 	bl	800052e <_write>
 8001008:	1c43      	adds	r3, r0, #1
 800100a:	d102      	bne.n	8001012 <_write_r+0x1e>
 800100c:	682b      	ldr	r3, [r5, #0]
 800100e:	b103      	cbz	r3, 8001012 <_write_r+0x1e>
 8001010:	6023      	str	r3, [r4, #0]
 8001012:	bd38      	pop	{r3, r4, r5, pc}
 8001014:	20000090 	.word	0x20000090

08001018 <_close_r>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	4d06      	ldr	r5, [pc, #24]	; (8001034 <_close_r+0x1c>)
 800101c:	2300      	movs	r3, #0
 800101e:	4604      	mov	r4, r0
 8001020:	4608      	mov	r0, r1
 8001022:	602b      	str	r3, [r5, #0]
 8001024:	f7ff fa9f 	bl	8000566 <_close>
 8001028:	1c43      	adds	r3, r0, #1
 800102a:	d102      	bne.n	8001032 <_close_r+0x1a>
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	b103      	cbz	r3, 8001032 <_close_r+0x1a>
 8001030:	6023      	str	r3, [r4, #0]
 8001032:	bd38      	pop	{r3, r4, r5, pc}
 8001034:	20000090 	.word	0x20000090

08001038 <_fstat_r>:
 8001038:	b538      	push	{r3, r4, r5, lr}
 800103a:	4d07      	ldr	r5, [pc, #28]	; (8001058 <_fstat_r+0x20>)
 800103c:	2300      	movs	r3, #0
 800103e:	4604      	mov	r4, r0
 8001040:	4608      	mov	r0, r1
 8001042:	4611      	mov	r1, r2
 8001044:	602b      	str	r3, [r5, #0]
 8001046:	f7ff fa99 	bl	800057c <_fstat>
 800104a:	1c43      	adds	r3, r0, #1
 800104c:	d102      	bne.n	8001054 <_fstat_r+0x1c>
 800104e:	682b      	ldr	r3, [r5, #0]
 8001050:	b103      	cbz	r3, 8001054 <_fstat_r+0x1c>
 8001052:	6023      	str	r3, [r4, #0]
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop
 8001058:	20000090 	.word	0x20000090

0800105c <_isatty_r>:
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	4d06      	ldr	r5, [pc, #24]	; (8001078 <_isatty_r+0x1c>)
 8001060:	2300      	movs	r3, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	602b      	str	r3, [r5, #0]
 8001068:	f7ff fa97 	bl	800059a <_isatty>
 800106c:	1c43      	adds	r3, r0, #1
 800106e:	d102      	bne.n	8001076 <_isatty_r+0x1a>
 8001070:	682b      	ldr	r3, [r5, #0]
 8001072:	b103      	cbz	r3, 8001076 <_isatty_r+0x1a>
 8001074:	6023      	str	r3, [r4, #0]
 8001076:	bd38      	pop	{r3, r4, r5, pc}
 8001078:	20000090 	.word	0x20000090

0800107c <_lseek_r>:
 800107c:	b538      	push	{r3, r4, r5, lr}
 800107e:	4d07      	ldr	r5, [pc, #28]	; (800109c <_lseek_r+0x20>)
 8001080:	4604      	mov	r4, r0
 8001082:	4608      	mov	r0, r1
 8001084:	4611      	mov	r1, r2
 8001086:	2200      	movs	r2, #0
 8001088:	602a      	str	r2, [r5, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	f7ff fa8f 	bl	80005ae <_lseek>
 8001090:	1c43      	adds	r3, r0, #1
 8001092:	d102      	bne.n	800109a <_lseek_r+0x1e>
 8001094:	682b      	ldr	r3, [r5, #0]
 8001096:	b103      	cbz	r3, 800109a <_lseek_r+0x1e>
 8001098:	6023      	str	r3, [r4, #0]
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	20000090 	.word	0x20000090

080010a0 <__malloc_lock>:
 80010a0:	4801      	ldr	r0, [pc, #4]	; (80010a8 <__malloc_lock+0x8>)
 80010a2:	f7ff be0d 	b.w	8000cc0 <__retarget_lock_acquire_recursive>
 80010a6:	bf00      	nop
 80010a8:	20000084 	.word	0x20000084

080010ac <__malloc_unlock>:
 80010ac:	4801      	ldr	r0, [pc, #4]	; (80010b4 <__malloc_unlock+0x8>)
 80010ae:	f7ff be08 	b.w	8000cc2 <__retarget_lock_release_recursive>
 80010b2:	bf00      	nop
 80010b4:	20000084 	.word	0x20000084

080010b8 <_read_r>:
 80010b8:	b538      	push	{r3, r4, r5, lr}
 80010ba:	4d07      	ldr	r5, [pc, #28]	; (80010d8 <_read_r+0x20>)
 80010bc:	4604      	mov	r4, r0
 80010be:	4608      	mov	r0, r1
 80010c0:	4611      	mov	r1, r2
 80010c2:	2200      	movs	r2, #0
 80010c4:	602a      	str	r2, [r5, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	f7ff fa14 	bl	80004f4 <_read>
 80010cc:	1c43      	adds	r3, r0, #1
 80010ce:	d102      	bne.n	80010d6 <_read_r+0x1e>
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	b103      	cbz	r3, 80010d6 <_read_r+0x1e>
 80010d4:	6023      	str	r3, [r4, #0]
 80010d6:	bd38      	pop	{r3, r4, r5, pc}
 80010d8:	20000090 	.word	0x20000090

080010dc <_init>:
 80010dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010de:	bf00      	nop
 80010e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010e2:	bc08      	pop	{r3}
 80010e4:	469e      	mov	lr, r3
 80010e6:	4770      	bx	lr

080010e8 <_fini>:
 80010e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ea:	bf00      	nop
 80010ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ee:	bc08      	pop	{r3}
 80010f0:	469e      	mov	lr, r3
 80010f2:	4770      	bx	lr
